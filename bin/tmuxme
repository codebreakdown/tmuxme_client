#!/usr/bin/env ruby

require 'rubygems'
require 'rest-client'
require 'net/ssh'
require 'json'
require 'thread'
require 'rbconfig'

Thread.abort_on_exception = true

def generate_authorized_keys_content(public_keys)
  cleaned_keys = []
  public_keys.each do |pk|
    cleaned_keys << "command=\"tmux -S /tmp/tmuxme_pair_sock attach\" #{pk.strip}"
  end
  return cleaned_keys.join("\n")
end


def os
  @os ||= (
    host_os = RbConfig::CONFIG['host_os']
    case host_os
    when /mswin|msys|mingw|cygwin|bccwin|wince|emc/
      :windows
    when /darwin|mac os/
      :macosx
    when /linux/
      :linux
    when /solaris|bsd/
      :unix
    else
      :unknown
    end
  )
end

if ARGV.length < 1
  puts "You can't pair program with yourself silly."
  puts "Usage: tmuxme user1 [user2...]"
  exit
end

# Check if remote login is enabled
`netstat -an | grep "[:.]22 " | grep "tcp[^6]" | grep LISTEN`
if $? != 0
  # didn't find it listening on port 22
  puts "Error: Remote Login is not enabled"
  puts "tmuxme requires Remote Login to be enabled for this user."
  if os == :macosx
    puts "Please enable Remote Login in System Preferences -> Sharing -> Remote Login and try again."
  end
  exit
end

invitees = ARGV.dup
pairers = []

remote_port = nil
remote_port_lock = Mutex.new

begin

  # Make sure the ~/.ssh directory exists
  if !File.directory?("#{ENV['HOME']}/.ssh")
    FileUtils.mkdir_p("#{ENV['HOME']}/.ssh", :mode => 0700)
  end

  # Make sure the ~/.ssh/authorized_keys file exists
  if !File.exists?("#{ENV['HOME']}/.ssh/authorized_keys")
    FileUtils.touch("#{ENV['HOME']}/.ssh/authorized_keys")
    FileUtils.chmod(0600, "#{ENV['HOME']}/.ssh/authorized_keys")
  end

  # back up users authorized_keys file
  if !File.exists?("#{ENV['HOME']}/.ssh/authorized_keys.tmuxme.original")
    puts "- Backing up ~/.ssh/authorized_keys to ~/.ssh/authorized_keys.tmuxme.original to store it the first time tmuxme was run"
    FileUtils.cp("#{ENV['HOME']}/.ssh/authorized_keys", "#{ENV['HOME']}/.ssh/authorized_keys.tmuxme.original")
  end
  puts "- Backing up ~/.ssh/authorized_keys to ~/.ssh/authorized_keys.tmuxme.backup"
  FileUtils.cp("#{ENV['HOME']}/.ssh/authorized_keys", "#{ENV['HOME']}/.ssh/authorized_keys.tmuxme.backup")

  public_keys = []
  # fetch the specified users public keys
  invitees.each do |invitee|
    begin
      response = RestClient.get "http://tmux.me/api/v1/users/#{invitee}/public_keys.json"
      current_invitees_public_keys = JSON.parse(response.to_s)
      if current_invitees_public_keys.empty?
        puts
        puts "Warning: Pair (#{invitee}) does not have any public keys on tmux.me. Ask them to add one."
      else
        pairers << invitee
        public_keys.concat(current_invitees_public_keys)
      end
    rescue => e
      case e.response.code
      when 404
        puts
        puts "Warning: Pair (#{invitee}) is not a tmux.me registered user. Please ask them to signup and add their public key."
      end
    end
  end

  if public_keys.empty?
    puts
    puts "Error: Either the users you provided don't exist or they don't have keys on tmux.me."
    exit 1
  end

  # generate the new authorized_keys content from obtained public keys
  content = generate_authorized_keys_content(public_keys)

  original_authorized_keys_content = File.read("#{ENV['HOME']}/.ssh/authorized_keys")

  # prepend the generated content to the authorized_keys file
  puts "- Updating ~/.ssh/authorized_keys with (#{pairers.join(', ')}) public keys"
  new_authorized_keys_content = [content, original_authorized_keys_content].join("\n")
  File.open("#{ENV['HOME']}/.ssh/authorized_keys", "w") do |f|
    f.write(new_authorized_keys_content)
  end

  # setup the remote port forward (need to spin off this in a sep thread)
  Thread.new do
    port = nil
    while true
      # Fetch an un-used high numbered port from the tmux.me REST api.
      remote_port_lock.synchronize {
        remote_port = 6000 + rand(50000)
        port = remote_port
      }

      begin
        # Starts the tunnel but blocks so would probably need to throw this in a child
        # thread of the process.
        Net::SSH.start("tmux.me", "tunnel") do |ssh|
          ssh.forward.remote(22, "localhost", port, "0.0.0.0")
          ssh.loop { true }
        end
      rescue Exception => e
        puts e.message
        next
      end
    end
  end

  # launch detached tmux sessions
  `tmux -S /tmp/tmuxme_pair_sock new-session -s tmuxme -d`

  puts
  puts "E-mail invites will be sent to (#{pairers.join(', ')}) when you press enter below."
  puts "However, to manually invite (#{pairers.join(', ')}) to the pairing session instruct them to run the following:"
  puts
  remote_port_lock.synchronize {
    puts "\tssh #{ENV['USER']}@tmux.me -p #{remote_port}"
  }
  puts
  print "Press enter to invite (#{pairers.join(', ')}) via e-mail and attach to the tmux session."
  $stdout.flush
  garbage = $stdin.gets

  # notify tmux.me service that the pairing session is ready
  puts "Sending invites to (#{pairers.join(', ')})."
  remote_port_lock.synchronize {
    RestClient.post "http://tmux.me/api/v1/pairing_sessions", :system_user => ENV['USER'], :pairing_users => pairers, :port_number => remote_port
  }

  # attach to tmux session and wait for that process to exit
  `tmux -S /tmp/tmuxme_pair_sock attach`
ensure
  puts
  puts "- Restoring ~/.ssh/authorized_keys from ~/.ssh/authorized_keys.tmuxme.backup"
  # when the tmux process exits then restore the authorized_keys file
  FileUtils.cp("#{ENV['HOME']}/.ssh/authorized_keys.tmuxme.backup", "#{ENV['HOME']}/.ssh/authorized_keys")
end
